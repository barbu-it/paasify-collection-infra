---
version: "3.4"

services:
  server:
    #image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    image: ${app_image:-ghcr.io/goauthentik/server}:${app_image_version:-2022.12.2}
    restart: unless-stopped
    command: server
    environment:

      AUTHENTIK_BOOTSTRAP_EMAIL: $app_admin_email
      AUTHENTIK_BOOTSTRAP_PASSWORD: $app_admin_pass
      AUTHENTIK_BOOTSTRAP_TOKEN: $app_admin_token

      AUTHENTIK_SECRET_KEY: $app_token

      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${app_db_user:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${app_db_name:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${app_db_pass:-authentik}
    volumes:
      - $app_dir_conf/media:/media
      - $app_dir_conf/custom-templates:/templates
    #env_file:
    #  - $app_dir_conf/env
        #ports:
        #  - "${COMPOSE_PORT_HTTP:-9000}:9000"
        #  - "${COMPOSE_PORT_HTTPS:-9443}:9443"
    depends_on:
      - postgresql
      - redis
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2023.8.3}
    restart: unless-stopped
    command: worker
    environment:

      AUTHENTIK_BOOTSTRAP_EMAIL: $app_admin_email
      AUTHENTIK_BOOTSTRAP_PASSWORD: $app_admin_pass
      AUTHENTIK_BOOTSTRAP_TOKEN: $app_admin_token

      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${app_db_user:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${app_db_name:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${app_db_pass:-authentik}

      AUTHENTIK_SECRET_KEY: $app_token
    # `user: root` and the docker socket volume are optional.
    # See more for the docker socket integration here:
    # https://goauthentik.io/docs/outposts/integrations/docker
    # Removing `user: root` also prevents the worker from fixing the permissions
    # on the mounted folders, so when removing this make sure the folders have the correct UID/GID
    # (1000:1000 by default)
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - $app_dir_conf/media:/media
      - $app_dir_conf/certs:/certs
      - $app_dir_conf/custom-templates:/templates
    #env_file:
    #  - .env
    depends_on:
      - postgresql
      - redis

  postgresql:
    image: docker.io/library/postgres:12-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - $app_dir_db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${app_db_pass:-authentik}
      POSTGRES_USER: ${app_db_user:-authentik}
      POSTGRES_DB: ${app_db_name:-authentik}
      AUTHENTIK_SECRET_KEY: $app_token
    #env_file:
    #  - $app_dir_conf/env
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - $app_dir_state:/data

        #volumes:
        #  database:
        #    driver: local
        #  redis:
        #    driver: local
